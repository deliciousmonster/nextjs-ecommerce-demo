"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algoliasearch";
exports.ids = ["vendor-chunks/algoliasearch"];
exports.modules = {

/***/ "(rsc)/./node_modules/algoliasearch/dist/node.js":
/*!*************************************************!*\
  !*** ./node_modules/algoliasearch/dist/node.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   algoliasearch: () => (/* binding */ algoliasearch),\n/* harmony export */   apiClientVersion: () => (/* reexport safe */ _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.apiClientVersion)\n/* harmony export */ });\n/* harmony import */ var _algolia_client_abtesting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/client-abtesting */ \"(rsc)/./node_modules/@algolia/client-abtesting/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_analytics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/client-analytics */ \"(rsc)/./node_modules/@algolia/client-analytics/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_insights__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/client-insights */ \"(rsc)/./node_modules/@algolia/client-insights/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_personalization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @algolia/client-personalization */ \"(rsc)/./node_modules/@algolia/client-personalization/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_query_suggestions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @algolia/client-query-suggestions */ \"(rsc)/./node_modules/@algolia/client-query-suggestions/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/client-search */ \"(rsc)/./node_modules/@algolia/client-search/dist/builds/node.js\");\n/* harmony import */ var _algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @algolia/ingestion */ \"(rsc)/./node_modules/@algolia/ingestion/dist/builds/node.js\");\n/* harmony import */ var _algolia_monitoring__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @algolia/monitoring */ \"(rsc)/./node_modules/@algolia/monitoring/dist/builds/node.js\");\n/* harmony import */ var _algolia_recommend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @algolia/recommend */ \"(rsc)/./node_modules/@algolia/recommend/dist/builds/node.js\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// builds/node.ts\nvar node_exports = {};\n__export(node_exports, {\n  algoliasearch: () => algoliasearch,\n  apiClientVersion: () => _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.apiClientVersion\n});\n\n\n\n\n\n\n\n\n\n\n// builds/models.ts\nvar models_exports = {};\n__export(models_exports, {\n  apiClientVersion: () => _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.apiClientVersion\n});\n__reExport(models_exports, _algolia_client_abtesting__WEBPACK_IMPORTED_MODULE_1__);\n__reExport(models_exports, _algolia_client_analytics__WEBPACK_IMPORTED_MODULE_2__);\n__reExport(models_exports, _algolia_client_insights__WEBPACK_IMPORTED_MODULE_3__);\n__reExport(models_exports, _algolia_client_personalization__WEBPACK_IMPORTED_MODULE_4__);\n__reExport(models_exports, _algolia_client_query_suggestions__WEBPACK_IMPORTED_MODULE_5__);\n__reExport(models_exports, _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__);\n__reExport(models_exports, _algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__);\n__reExport(models_exports, _algolia_monitoring__WEBPACK_IMPORTED_MODULE_7__);\n__reExport(models_exports, _algolia_recommend__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n\n// builds/node.ts\n__reExport(node_exports, models_exports);\nfunction algoliasearch(appId, apiKey, options) {\n  if (!appId || typeof appId !== \"string\") {\n    throw new Error(\"`appId` is missing.\");\n  }\n  if (!apiKey || typeof apiKey !== \"string\") {\n    throw new Error(\"`apiKey` is missing.\");\n  }\n  const client = (0,_algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.searchClient)(appId, apiKey, options);\n  let ingestionTransporter;\n  if (options == null ? void 0 : options.transformation) {\n    if (!options.transformation.region) {\n      throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n    }\n    ingestionTransporter = (0,_algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__.ingestionClient)(appId, apiKey, options.transformation.region, options);\n  }\n  return {\n    ...client,\n    async saveObjectsWithTransformation({ indexName, objects, waitForTasks }, requestOptions) {\n      var _a;\n      if (!ingestionTransporter) {\n        throw new Error(\"`transformation.region` must be provided at client instantiation before calling this method.\");\n      }\n      if (!((_a = options == null ? void 0 : options.transformation) == null ? void 0 : _a.region)) {\n        throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n      }\n      return ingestionTransporter.chunkedPush(\n        { indexName, objects, action: \"addObject\", waitForTasks },\n        requestOptions\n      );\n    },\n    async partialUpdateObjectsWithTransformation({ indexName, objects, createIfNotExists, waitForTasks }, requestOptions) {\n      var _a;\n      if (!ingestionTransporter) {\n        throw new Error(\"`transformation.region` must be provided at client instantiation before calling this method.\");\n      }\n      if (!((_a = options == null ? void 0 : options.transformation) == null ? void 0 : _a.region)) {\n        throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n      }\n      return ingestionTransporter.chunkedPush(\n        {\n          indexName,\n          objects,\n          action: createIfNotExists ? \"partialUpdateObject\" : \"partialUpdateObjectNoCreate\",\n          waitForTasks\n        },\n        requestOptions\n      );\n    },\n    async replaceAllObjectsWithTransformation({ indexName, objects, batchSize, scopes }, requestOptions) {\n      var _a;\n      if (!ingestionTransporter) {\n        throw new Error(\"`transformation.region` must be provided at client instantiation before calling this method.\");\n      }\n      if (!((_a = options == null ? void 0 : options.transformation) == null ? void 0 : _a.region)) {\n        throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n      }\n      const randomSuffix = Math.floor(Math.random() * 1e6) + 1e5;\n      const tmpIndexName = `${indexName}_tmp_${randomSuffix}`;\n      if (scopes === void 0) {\n        scopes = [\"settings\", \"rules\", \"synonyms\"];\n      }\n      try {\n        let copyOperationResponse = await this.operationIndex(\n          {\n            indexName,\n            operationIndexParams: {\n              operation: \"copy\",\n              destination: tmpIndexName,\n              scope: scopes\n            }\n          },\n          requestOptions\n        );\n        const watchResponses = await ingestionTransporter.chunkedPush(\n          { indexName: tmpIndexName, objects, waitForTasks: true, batchSize, referenceIndexName: indexName },\n          requestOptions\n        );\n        await this.waitForTask({\n          indexName: tmpIndexName,\n          taskID: copyOperationResponse.taskID\n        });\n        copyOperationResponse = await this.operationIndex(\n          {\n            indexName,\n            operationIndexParams: {\n              operation: \"copy\",\n              destination: tmpIndexName,\n              scope: scopes\n            }\n          },\n          requestOptions\n        );\n        await this.waitForTask({\n          indexName: tmpIndexName,\n          taskID: copyOperationResponse.taskID\n        });\n        const moveOperationResponse = await this.operationIndex(\n          {\n            indexName: tmpIndexName,\n            operationIndexParams: { operation: \"move\", destination: indexName }\n          },\n          requestOptions\n        );\n        await this.waitForTask({\n          indexName: tmpIndexName,\n          taskID: moveOperationResponse.taskID\n        });\n        return { copyOperationResponse, watchResponses, moveOperationResponse };\n      } catch (error) {\n        await this.deleteIndex({ indexName: tmpIndexName });\n        throw error;\n      }\n    },\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua() {\n      return client.transporter.algoliaAgent.value;\n    },\n    initAbtesting: (initOptions) => {\n      return (0,_algolia_client_abtesting__WEBPACK_IMPORTED_MODULE_1__.abtestingClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initAnalytics: (initOptions) => {\n      return (0,_algolia_client_analytics__WEBPACK_IMPORTED_MODULE_2__.analyticsClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initIngestion: (initOptions) => {\n      return (0,_algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__.ingestionClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initInsights: (initOptions) => {\n      return (0,_algolia_client_insights__WEBPACK_IMPORTED_MODULE_3__.insightsClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initMonitoring: (initOptions = {}) => {\n      return (0,_algolia_monitoring__WEBPACK_IMPORTED_MODULE_7__.monitoringClient)(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    },\n    initPersonalization: (initOptions) => {\n      return (0,_algolia_client_personalization__WEBPACK_IMPORTED_MODULE_4__.personalizationClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initQuerySuggestions: (initOptions) => {\n      return (0,_algolia_client_query_suggestions__WEBPACK_IMPORTED_MODULE_5__.querySuggestionsClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initRecommend: (initOptions = {}) => {\n      return (0,_algolia_recommend__WEBPACK_IMPORTED_MODULE_8__.recommendClient)(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    }\n  };\n}\n\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/algoliasearch/dist/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algoliasearch/dist/node.js":
/*!*************************************************!*\
  !*** ./node_modules/algoliasearch/dist/node.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   algoliasearch: () => (/* binding */ algoliasearch),\n/* harmony export */   apiClientVersion: () => (/* reexport safe */ _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.apiClientVersion)\n/* harmony export */ });\n/* harmony import */ var _algolia_client_abtesting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/client-abtesting */ \"(ssr)/./node_modules/@algolia/client-abtesting/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_analytics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/client-analytics */ \"(ssr)/./node_modules/@algolia/client-analytics/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_insights__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/client-insights */ \"(ssr)/./node_modules/@algolia/client-insights/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_personalization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @algolia/client-personalization */ \"(ssr)/./node_modules/@algolia/client-personalization/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_query_suggestions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @algolia/client-query-suggestions */ \"(ssr)/./node_modules/@algolia/client-query-suggestions/dist/builds/node.js\");\n/* harmony import */ var _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/client-search */ \"(ssr)/./node_modules/@algolia/client-search/dist/builds/node.js\");\n/* harmony import */ var _algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @algolia/ingestion */ \"(ssr)/./node_modules/@algolia/ingestion/dist/builds/node.js\");\n/* harmony import */ var _algolia_monitoring__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @algolia/monitoring */ \"(ssr)/./node_modules/@algolia/monitoring/dist/builds/node.js\");\n/* harmony import */ var _algolia_recommend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @algolia/recommend */ \"(ssr)/./node_modules/@algolia/recommend/dist/builds/node.js\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// builds/node.ts\nvar node_exports = {};\n__export(node_exports, {\n  algoliasearch: () => algoliasearch,\n  apiClientVersion: () => _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.apiClientVersion\n});\n\n\n\n\n\n\n\n\n\n\n// builds/models.ts\nvar models_exports = {};\n__export(models_exports, {\n  apiClientVersion: () => _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.apiClientVersion\n});\n__reExport(models_exports, _algolia_client_abtesting__WEBPACK_IMPORTED_MODULE_1__);\n__reExport(models_exports, _algolia_client_analytics__WEBPACK_IMPORTED_MODULE_2__);\n__reExport(models_exports, _algolia_client_insights__WEBPACK_IMPORTED_MODULE_3__);\n__reExport(models_exports, _algolia_client_personalization__WEBPACK_IMPORTED_MODULE_4__);\n__reExport(models_exports, _algolia_client_query_suggestions__WEBPACK_IMPORTED_MODULE_5__);\n__reExport(models_exports, _algolia_client_search__WEBPACK_IMPORTED_MODULE_0__);\n__reExport(models_exports, _algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__);\n__reExport(models_exports, _algolia_monitoring__WEBPACK_IMPORTED_MODULE_7__);\n__reExport(models_exports, _algolia_recommend__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n\n// builds/node.ts\n__reExport(node_exports, models_exports);\nfunction algoliasearch(appId, apiKey, options) {\n  if (!appId || typeof appId !== \"string\") {\n    throw new Error(\"`appId` is missing.\");\n  }\n  if (!apiKey || typeof apiKey !== \"string\") {\n    throw new Error(\"`apiKey` is missing.\");\n  }\n  const client = (0,_algolia_client_search__WEBPACK_IMPORTED_MODULE_0__.searchClient)(appId, apiKey, options);\n  let ingestionTransporter;\n  if (options == null ? void 0 : options.transformation) {\n    if (!options.transformation.region) {\n      throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n    }\n    ingestionTransporter = (0,_algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__.ingestionClient)(appId, apiKey, options.transformation.region, options);\n  }\n  return {\n    ...client,\n    async saveObjectsWithTransformation({ indexName, objects, waitForTasks }, requestOptions) {\n      var _a;\n      if (!ingestionTransporter) {\n        throw new Error(\"`transformation.region` must be provided at client instantiation before calling this method.\");\n      }\n      if (!((_a = options == null ? void 0 : options.transformation) == null ? void 0 : _a.region)) {\n        throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n      }\n      return ingestionTransporter.chunkedPush(\n        { indexName, objects, action: \"addObject\", waitForTasks },\n        requestOptions\n      );\n    },\n    async partialUpdateObjectsWithTransformation({ indexName, objects, createIfNotExists, waitForTasks }, requestOptions) {\n      var _a;\n      if (!ingestionTransporter) {\n        throw new Error(\"`transformation.region` must be provided at client instantiation before calling this method.\");\n      }\n      if (!((_a = options == null ? void 0 : options.transformation) == null ? void 0 : _a.region)) {\n        throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n      }\n      return ingestionTransporter.chunkedPush(\n        {\n          indexName,\n          objects,\n          action: createIfNotExists ? \"partialUpdateObject\" : \"partialUpdateObjectNoCreate\",\n          waitForTasks\n        },\n        requestOptions\n      );\n    },\n    async replaceAllObjectsWithTransformation({ indexName, objects, batchSize, scopes }, requestOptions) {\n      var _a;\n      if (!ingestionTransporter) {\n        throw new Error(\"`transformation.region` must be provided at client instantiation before calling this method.\");\n      }\n      if (!((_a = options == null ? void 0 : options.transformation) == null ? void 0 : _a.region)) {\n        throw new Error(\"`region` must be provided when leveraging the transformation pipeline\");\n      }\n      const randomSuffix = Math.floor(Math.random() * 1e6) + 1e5;\n      const tmpIndexName = `${indexName}_tmp_${randomSuffix}`;\n      if (scopes === void 0) {\n        scopes = [\"settings\", \"rules\", \"synonyms\"];\n      }\n      try {\n        let copyOperationResponse = await this.operationIndex(\n          {\n            indexName,\n            operationIndexParams: {\n              operation: \"copy\",\n              destination: tmpIndexName,\n              scope: scopes\n            }\n          },\n          requestOptions\n        );\n        const watchResponses = await ingestionTransporter.chunkedPush(\n          { indexName: tmpIndexName, objects, waitForTasks: true, batchSize, referenceIndexName: indexName },\n          requestOptions\n        );\n        await this.waitForTask({\n          indexName: tmpIndexName,\n          taskID: copyOperationResponse.taskID\n        });\n        copyOperationResponse = await this.operationIndex(\n          {\n            indexName,\n            operationIndexParams: {\n              operation: \"copy\",\n              destination: tmpIndexName,\n              scope: scopes\n            }\n          },\n          requestOptions\n        );\n        await this.waitForTask({\n          indexName: tmpIndexName,\n          taskID: copyOperationResponse.taskID\n        });\n        const moveOperationResponse = await this.operationIndex(\n          {\n            indexName: tmpIndexName,\n            operationIndexParams: { operation: \"move\", destination: indexName }\n          },\n          requestOptions\n        );\n        await this.waitForTask({\n          indexName: tmpIndexName,\n          taskID: moveOperationResponse.taskID\n        });\n        return { copyOperationResponse, watchResponses, moveOperationResponse };\n      } catch (error) {\n        await this.deleteIndex({ indexName: tmpIndexName });\n        throw error;\n      }\n    },\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua() {\n      return client.transporter.algoliaAgent.value;\n    },\n    initAbtesting: (initOptions) => {\n      return (0,_algolia_client_abtesting__WEBPACK_IMPORTED_MODULE_1__.abtestingClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initAnalytics: (initOptions) => {\n      return (0,_algolia_client_analytics__WEBPACK_IMPORTED_MODULE_2__.analyticsClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initIngestion: (initOptions) => {\n      return (0,_algolia_ingestion__WEBPACK_IMPORTED_MODULE_6__.ingestionClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initInsights: (initOptions) => {\n      return (0,_algolia_client_insights__WEBPACK_IMPORTED_MODULE_3__.insightsClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initMonitoring: (initOptions = {}) => {\n      return (0,_algolia_monitoring__WEBPACK_IMPORTED_MODULE_7__.monitoringClient)(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    },\n    initPersonalization: (initOptions) => {\n      return (0,_algolia_client_personalization__WEBPACK_IMPORTED_MODULE_4__.personalizationClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initQuerySuggestions: (initOptions) => {\n      return (0,_algolia_client_query_suggestions__WEBPACK_IMPORTED_MODULE_5__.querySuggestionsClient)(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options\n      );\n    },\n    initRecommend: (initOptions = {}) => {\n      return (0,_algolia_recommend__WEBPACK_IMPORTED_MODULE_8__.recommendClient)(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    }\n  };\n}\n\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algoliasearch/dist/node.js\n");

/***/ })

};
;